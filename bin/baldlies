#! /usr/bin/perl

# This file is part of BaldLies.
# Copyright (C) 2012 Guido Flohr, http://guido-flohr.net/.
#
# BaldLies is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# BaldLies is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Gibbon.  If not, see <http://www.gnu.org/licenses/>.

use strict;

use Getopt::Long;
use File::HomeDir;

use BaldLies::Server;
use BaldLies::Util qw (empty);
use BaldLies::Const (qw (:log_levels));

sub display_usage;
sub display_version;
sub usage_error;

# Make sure we run in the POSIX locale dispite of all Perl I18N
# ideosyncrasies.
$ENV{LC_ALL} = $ENV{LANGUAGE} = $ENV{LANG} = 'C';

Getopt::Long::Configure ('bundling');

my $option_help;
my $option_version;
my $option_quiet;

my %options = (
    listen => [],
);

GetOptions (
    'c|config-file'   => \$options{config_file},
    'd|debug'         => \$options{debug},
    'l|listen=s'      =>  $options{listen},

    'u|user=s'        => \$options{user},
    'g|group=s'       => \$options{group},

    'upgrade'         => \$options{upgrade},
    'dump-configuration' => \$options{dump_configuration},
  
    'auto-recompile'  => \$options{auto_recompile},
    
    'h|help'          => \$option_help,
    
    'v|verbose+'      => \$options{verbose},
    'V|version'       => \$option_version,
) or usage_error;

display_usage if $option_help;
display_version if $option_version;

usage_error "The options --quiet and --verbose are mutually exclusive!\n"
    if ($option_quiet && $options{verbose});
usage_error "The options --upgrade and --dump-configuration are mutually exclusive!\n"
    if ($options{upgrade} && $options{dump_configuration});

if ($option_quiet) {
    $options{verbose} = LOG_ERROR;
} elsif ($options{verbose}) {
    $options{verbose} += 2;
} else {
    $options{verbose} = LOG_NOTICE;
}

BaldLies::Server->new (%options)
                ->run;
                
sub usage_error {
    my $message = shift;
    if ($message) {
        $message =~ s/\s+$//;
        $message = "$0: $message\n";
    }
    else {
        $message = '';
    }
    die <<EOF;
${message}Usage: $0 [OPTIONS]
Try '$0 --help' for more information!
EOF
}

sub display_usage {
    # Pod::Text cannot print to memory.  We have to teach it that:
    open my $saved_stdout, ">&STDOUT"
        or die "Cannot dup standard output: $!\n";
            
    my $stdout = tie *STDOUT, 'MemPrinter';
    require Pod::Text;
    Pod::Text->new (indent => 4)
             ->parse_from_file ($0);
    my $buffer = $stdout->buffer;
    untie *STDOUT;
    
    open STDOUT, '>&', $saved_stdout
        or die "Cannot restore standard output: $!\n";

    my @sections = split /((?:\n|\A)[A-Z]+)/, $buffer;          
    shift @sections;
    my %sections;
    while (@sections) {
        my $key = shift @sections;
        $key =~ s/^\n//;
        my $value = shift @sections;
        $sections{$key} = $value;
    }

    $sections{SYNOPSIS} =~ s/baldlies/$0/g;
    $sections{SYNOPSIS} =~ s/^[ \t\r\n]+//g;
    print $sections{SYNOPSIS};
    
    $sections{NAME} =~ s/^[ \t\r\n]+//g;
    $sections{NAME} =~ s/[ \t\r\n]+$//g;
    $sections{NAME} =~ s/baldlies[ \t\r\n]*-[ \t\r\n]*//g;
    
    print "\n$sections{NAME}.\n";
            
    $sections{DESCRIPTION} =~ s/^[ \t\r\n]+//g;
    $sections{DESCRIPTION} =~ s/\n[ \t\r]+/\n/g;
    $sections{DESCRIPTION} =~ s/[ \t\r\n]+$//g;
    print "\n$sections{DESCRIPTION}\n";

    $sections{OPTIONS} =~ s/^[ \t\r\n]+//;
    $sections{OPTIONS} =~ s/[ \t\r\n]+$//;
    $sections{OPTIONS} =~ s/\n {4}/\n/g;
    $sections{OPTIONS} =~ s/\n\n+ +-/\n  -/g;
    print "\n$sections{OPTIONS}\n";
    
    print <<EOF;

More in-depth information can be found with `man baldlies' or
`perldoc $0'.
EOF
         
    exit 0;
}

sub display_version {
    print <<EOF;
$0 (BaldLies) $BaldLies::Server::VERSION
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Written by Guido Flohr.
EOF

    exit 0;
}

package MemPrinter;

use strict;

sub TIEHANDLE {
    bless { __write_buffer => '' }, shift;
}

sub WRITE {
    my ($self, $buffer, $length, $offset) = @_;

    $length ||= length $buffer;
    $offset ||= 0;
    my $chunk = substr $buffer, $offset, $length;

    $self->{__write_buffer} .= $chunk;
    
    return length $chunk;
}

sub PRINT {
    my ($self, @chunks) = @_;

    return $self->WRITE (join $,, @chunks);
}

sub PRINTF {
    my ($self, $fmt, @args) = @_;
    
    my $string = sprintf $fmt, @args;
    
    return $self->PRINT($string);
}

sub CLOSE {
    shift;
}

sub UNTIE {
    shift->CLOSE;
}

sub buffer {
    shift->{__write_buffer}
}

1;

=head1 NAME

baldlies - The BaldLies server

=head1 SYNOPSIS

Usage: baldlies [OPTIONS]

=head1 DESCRIPTION

BaldLies is a reimplementation of the First Internet Backgammon Server FIBS
in Perl.  BaldLies is free software, available under the GNU General Public
License.

=head1 OPTIONS

Mandatory arguments to long options are mandatory for short options, too.

Mode of operation:

  -d, --debug                 do not fork into background
  -l, --listen=ADDRESS        listen on ADDRESS instead of
                              localhost:4321
  -u, --user=USER             run as user USER (name or id)
  -g, --group=GROUP           change to group GROUP (name or id)
  -v, --verbose               be verbose (you can give this option
                              multiple times to increase the verbosity 
                              level)
  -q, --quiet                 be quiet
  
Administrative options:

  --upgrade                   upgrade the database schema (happens
                              automatically with the default SQLite 
                              backend)
  --dump-configuration        dump all configuration values and exit
  
Developer options:

  --auto-recompile            recompile plug-ins before execution
  
Informative output:

  -h, --help                  show usage information and exit  
  -V, --version               display version information and exit

By default, the program will try to fork into the background and run as a
daemon.  This does not work under Windows!

Options given on the command-line override options read from a configuration
file.

You can give the option --listen multiple times if you want the server to 
listen on multiple ports and/or interfaces.  An address can be given
in the form HOSTNAME, HOSTNAME:PORT, IP, IP:PORT, *, or *:PORT.  The
special address `*' means all network interfaces.  Ports can be specified
in numerical form, as a well-known service name.

=head1 DETAILS

=head2 Installation

There is no need to install BaldLies.  If you just untar the sources, you can
start it like this from inside the directory BaldLies-I<VERSION>:

    perl -Tw -I lib bin/baldlies -d
    
The Perl option '-I lib' is necessary.  Otherwise the program cannot find its
libraries.

=head2 Defaults

When you just start baldlies, the program will create a directory "baldlies"
in your home directory.  In that directory, you will find the following
files:

=over 4

=item F<baldlies.sqlite>

An SQLite database containing all information the server has to remember
across sessions.

=item F<baldlies.pid>

Contains the pid of baldlies.

=item F<baldlies.log>

The log file.  You should remove that from time to time.  It can grow quite
big, especially when you give the option `-v' multiple times.

=item F<master.sock>

A unix domain socket.  All instances of the server communicate via this
socket.

=back

=head2 Basic Mode of Operation

The server is a forking server.  For every client connected, a new process
is spawned that handles the communication with the client.  Each client
communicates with the other clients and the database via the master
socket (see above).

It is sufficient to kill the master process.  Child processes should
automatically vanish.

=head2 Current State

You can currently register accounts and log into existing accounts, both in
classical telnet mode and CLIP mode.

When logged in, the command `help' shows a list of I<existing> commands.  Most
of them are just stubs, and they will just trigger a `not implementedf'
warning.

=head2 Incompatibilities to FIBS

Only things that could possibly break clients, are listed here.

=over 4

=item B<Multiple logins>

When logging into fibs.com multiple times, with the same credentials, you
get a warning right after you gave your username or after the complete CLIP
login.  Apart from that, parallel logins are tolerated.

BaldLies cannot allow multiple logins with the same username.  When logging
in again, the old connection is automatically closed with an error message.

=item B<Telnet Sequences>

Like fibs.com, an BaldLies server sends the telnet sequences `echo will' and
`echo wont' for hiding password entries.  It is tried to send them at the same
positions, where fibs.com does but that is not guaranteed.  In practice, this
is only important during registrations of new accounts.  In CLIP mode, no
telnet sequence is ever sent.

=item B<Chunk Size>

BaldLies seemingly tends to read and write data in larger chunks than fibs.com 
does.  Especially, there is no line-buffering.

=back

The biggest incompatibility is, of course, missing support for the vast
majority of commands available on fibs.com.

=head1 SECURITY

By default, the server only allows connections from your local machine, even
if you have told it to listen on external network interfaces.

If Net::Interface(3pm) is installed on your machine, it also allows connections
from your local networks.  But remember that it still only listens on the 
loopback interface, unless specified otherwise with the option `--listen'.

The server runs without problems in Perl's taint mode (perl option `-T').

=head1 BUGS

=over 4

=item B<In taint mode, you cannot debug the server.>

This seems to be an issue in Fcntl(3pm), not in BaldLies.

=back

=head1 SEE ALSO

BaldLies::Server(3pm), perl(1)
