#! /usr/bin/perl

# This file is part of OpenFIBS.
# Copyright (C) 2012 Guido Flohr, http://guido-flohr.net/.
#
# OpenFIBS is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# OpenFIBS is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Gibbon.  If not, see <http://www.gnu.org/licenses/>.

use strict;

use Getopt::Long;
use File::HomeDir;

use OpenFIBS::Server;
use OpenFIBS::Util qw (empty);
use OpenFIBS::Const (qw (:log_levels));

sub display_usage;
sub display_version;
sub usage_error;

# Make sure we run in the POSIX locale dispite of all Perl I18N
# ideosyncrasies.
$ENV{LC_ALL} = $ENV{LANGUAGE} = $ENV{LANG} = 'C';

Getopt::Long::Configure ('bundling');

my $option_help;
my $option_version;
my $option_quiet;

my %options = (
    listen => [],
);

GetOptions (
    'c|config-file'   => \$options{config_file},
    'd|debug'         => \$options{debug},
    'l|listen=s'      =>  $options{listen},

    'u|user=s'        => \$options{user},
    'g|group=s'       => \$options{group},

    'upgrade'         => \$options{upgrade},
    'dump-configuration' => \$options{dump_configuration},
    
    'h|help'          => \$option_help,
    'v|verbose+'      => \$options{verbose},
    'V|version'       => \$option_version,
) or usage_error;

display_usage if $option_help;
display_version if $option_version;

usage_error "The options --quiet and --verbose are mutually exclusive!\n"
    if ($option_quiet && $options{verbose});
usage_error "The options --upgrade and --dump-configuration are mutually exclusive!\n"
    if ($options{upgrade} && $options{dump_configuration});

if ($option_quiet) {
    $options{verbose} = LOG_ERROR;
} elsif ($options{verbose}) {
    $options{verbose} += 2;
} else {
    $options{verbose} = LOG_NOTICE;
}

OpenFIBS::Server->new (%options)
                ->run;
                
sub usage_error {
    my $message = shift;
    if ($message) {
        $message =~ s/\s+$//;
        $message = "$0: $message\n";
    }
    else {
        $message = '';
    }
    die <<EOF;
${message}Usage: $0 [OPTIONS]
Try '$0 --help' for more information!
EOF
}

sub display_usage {
    # Pod::Text cannot print to memory.  We have to teach it that:
    open my $saved_stdout, ">&STDOUT"
        or die "Cannot dup standard output: $!\n";
            
    my $stdout = tie *STDOUT, 'MemPrinter';
    require Pod::Text;
    Pod::Text->new (indent => 4)
             ->parse_from_file ($0);
    my $buffer = $stdout->buffer;
    untie *STDOUT;
    
    open STDOUT, '>&', $saved_stdout
        or die "Cannot restore standard output: $!\n";

    my @sections = split /((?:\n|\A)[A-Z]+)/, $buffer;          
    shift @sections;
    my %sections;
    while (@sections) {
        my $key = shift @sections;
        $key =~ s/^\n//;
        my $value = shift @sections;
        $sections{$key} = $value;
    }

    $sections{SYNOPSIS} =~ s/openfibs/$0/g;
    $sections{SYNOPSIS} =~ s/^[ \t\r\n]+//g;
    print $sections{SYNOPSIS};
    
    $sections{NAME} =~ s/^[ \t\r\n]+//g;
    $sections{NAME} =~ s/[ \t\r\n]+$//g;
    $sections{NAME} =~ s/openfibs[ \t\r\n]*-[ \t\r\n]*//g;
    
    print "\n$sections{NAME}.\n";
            
    $sections{DESCRIPTION} =~ s/^[ \t\r\n]+//g;
    $sections{DESCRIPTION} =~ s/\n[ \t\r]+/\n/g;
    $sections{DESCRIPTION} =~ s/[ \t\r\n]+$//g;
    print "\n$sections{DESCRIPTION}\n";

    $sections{OPTIONS} =~ s/^[ \t\r\n]+//;
    $sections{OPTIONS} =~ s/[ \t\r\n]+$//;
    $sections{OPTIONS} =~ s/\n {4}/\n/g;
    $sections{OPTIONS} =~ s/\n\n+ +-/\n  -/g;
    print "\n$sections{OPTIONS}\n";
            
    exit 0;
}

sub display_version {
    print <<EOF;
$0 (OpenFIBS) $OpenFIBS::Server::VERSION
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Written by Guido Flohr.
EOF

    exit 0;
}

package MemPrinter;

use strict;

sub TIEHANDLE {
    bless { __write_buffer => '' }, shift;
}

sub WRITE {
    my ($self, $buffer, $length, $offset) = @_;

    $length ||= length $buffer;
    $offset ||= 0;
    my $chunk = substr $buffer, $offset, $length;

    $self->{__write_buffer} .= $chunk;
    
    return length $chunk;
}

sub PRINT {
    my ($self, @chunks) = @_;

    return $self->WRITE (join $,, @chunks);
}

sub PRINTF {
    my ($self, $fmt, @args) = @_;
    
    my $string = sprintf $fmt, @args;
    
    return $self->PRINT($string);
}

sub CLOSE {
    shift;
}

sub UNTIE {
    shift->CLOSE;
}

sub buffer {
    shift->{__write_buffer}
}

1;

=head1 NAME

openfibs - The OpenFIBS server

=head1 SYNOPSIS

Usage: openfibs [OPTIONS]

=head1 DESCRIPTION

OpenFIBS is a reimplementation of the First Internet Backgammon Server FIBS
in Perl.  OpenFIBS is free software, available under the GNU General Public
License.

=head1 OPTIONS

Mandatory arguments to long options are mandatory for short options, too.

Mode of operation:

  -d, --debug                 do not fork into background
  -l, --listen=ADDRESS        listen on ADDRESS instead of
                              localhost:4321
  -u, --user=USER             run as user USER (name or id)
  -g, --group=GROUP           change to group GROUP (name or id)
  -v, --verbose               be verbose (you can give this option multiple
                              times to increase the verbosity level)
  -q, --quiet                 be quiet
  
Administrative options:

  --upgrade                   upgrade the database schema (happens
                              automatically with the default SQLite backend)
  --dump-configuration        dump all configuration values and exit
  
Informative output:

  -h, --help                  show usage information and exit  
  -V, --version               display version information and exit

By default, the program will try to fork into the background and run as a
daemon.  This does not work under Windows!

Options given on the command-line override options read from a configuration
file.

You can give the option --listen multiple times if you want the server to 
listen on multiple ports and/or interfaces.  An address can be given
in the form HOSTNAME, HOSTNAME:PORT, IP, IP:PORT, *, or *:PORT.  The
special address `*' means all network interfaces.  Ports can be specified
in numerical form, as a well-known service name.

=head1 SEE ALSO

OpenFIBS::Server(3pm), perl(1)
